name: Android (QML) Debug Build

on:
  push:
    branches: [ main, master ]
    paths-ignore: [ '**/*.md', 'docs/**' ]
  pull_request:
    paths-ignore: [ '**/*.md', 'docs/**' ]
  workflow_dispatch:

permissions:
  contents: read

concurrency:
  group: android-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build-android:
    runs-on: ubuntu-latest
    timeout-minutes: 180

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          submodules: recursive

      # ⬇️ 도커 호출을 가로채서 `run`의 `-t/-it/-ti/--tty`만 제거합니다.
      #     레포 소스는 손대지 않습니다.
      - name: Inject docker shim (drop TTY flags)
        shell: bash
        run: |
          mkdir -p "$HOME/bin"
          cat > "$HOME/bin/docker" <<'EOF'
          #!/usr/bin/env bash
          real="/usr/bin/docker"
          if [[ "$1" == "run" ]]; then
            shift 1
            args=()
            for a in "$@"; do
              case "$a" in
                -t|-it|-ti|--tty) ;;   # TTY 관련 옵션만 제거
                *) args+=("$a");;
              esac
            done
            exec "$real" run "${args[@]}"
          else
            exec "$real" "$@"
          fi
          EOF
          chmod +x "$HOME/bin/docker"
          echo "$HOME/bin" >> "$GITHUB_PATH"
          which docker
          docker --version

      - name: Build Android (qml arm64-v8a debug)
        shell: bash
        env:
          CI: "1"   # 비대화형 환경 표시(불필요한 프롬프트 방지)
        run: |
          chmod +x ./contrib/android/build.sh
          ./contrib/android/build.sh qml arm64-v8a debug

      - name: Locate APKs
        shell: bash
        run: |
          echo "Listing APKs..."
          find . -maxdepth 7 -type f -name "*.apk" -print || true

      - name: Upload APK artifacts
        uses: actions/upload-artifact@v4
        with:
          name: android-debug-apks
          path: |
            **/*.apk
            **/*-debug.apk
          if-no-files-found: warn
          retention-days: 7
